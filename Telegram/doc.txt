*1
pip
Менеджер пакетов Python. Команда pip install используется для установки любого программного пакета из
онлайн-репозитория общедоступных пакетов или Индекса пакетов Python (PyPI, Python Package Index).
pip install имя-пакета
*2
print
Командадля печати сообщений на экране или другом стандартном устройстве вывода. Команда print может использоваться для
печати любого типа объекта — целого числа, строки, списка, кортежа и других.
print(объект)
*3
class
Команда для создания классов. Python поддерживает объектно-ориентированное программирование и позволяет пользователям
создавать классы и инициализировать объекты. Класс может состоять из переменных с модификаторами доступа, функций с
возвращаемыми типами и даже других классов (вложенный класс). Синтаксис выглядит class так:
class ИмяКласса:
    код_тела_класса
Пример кода ниже продемонстрирует применение class при создании класса «student»:
«student»:
class student:
    name = ""
    def setName(self, passedValue):
        self.name = passedValue
    def displayName(self):
        print(self.name)
Чтобы использовать класс в Python, необходимо сначала создать его экземпляр, называемый объектом. Для этого нужно
вызвать класс по имени следующим образом:
ИмяКласса()
Как видно из приведенного выше синтаксиса, при создании объекта в Python, после имени класса всегда ставятся круглые
скобки. Обычно для удобства поиска вновь созданный объект тут же привязывается к переменной, через которую к нему в
дальнейшем и обращаются:
имя_переменной = ИмяКласса()
Пример создания объекта для класса «student»:
mystudent = student()
mystudent.setName("Alex Ignatov")
mystudent.displayName()
В результате мы получим вывод:
Alex Ignatov
Как и в других языках программирования, в Python также можно реализовать конструкторы и статические методы в классах,
используя соответственно метод dunder init() и декоратор @staticmethod.
*4
type
Команда для проверки типа или класса объекта.
type(объект)
*5
range
Команда для генерации последовательности целых чисел, начиная с 0 по умолчанию и заканчивая n, где n не включено в
сгенерированные числа. Эта команда в основном используется в циклах for.
range(start, stop, step)
В приведенном синтаксисе:
start — начало диапазона (опционально; по умолчанию — 0);
stop — номер, перед которым нужно остановиться (обязательно);
step — счетчик приращений (опционально; по умолчанию — 1).
Важно. Если функции range() будут даны только два параметра, она всегда будет рассматривать их как (start, stop), а не
как (stop, step).
*6
round
Команда для округления числа до заданной точности в десятичных разрядах. Позволяет сократить количество цифр после
запятой в числе с плавающей запятой до указанного значения.
round(number, digits)
В приведенном синтаксисе:
number — число с плавающей запятой;
digits — количество цифр после десятичной точки (опционально; по умолчанию — 0).
*7
input
Команда для получения ввода от пользователя. Исполнение программы будет остановлено до тех пор, пока пользователь не
введет какое-либо значение, которое будет преобразовано функцией input() в строку. Если в качестве входных данных
нужно взять целое число, его нужно преобразовать явно.
input(message)
В приведенном синтаксисе: message — текст, который нужно отобразить пользователю (опционально).
*8
def
Команда определения функции Python дает возможность оборачивать повторно используемый код внутри функций, чтобы вызвать
 его позже, когда это необходимо. Функция def позволяет свести к минимуму избыточность кода.
def имя_функции (параметры):
"""строка документации"""
состояние(я)
*9
len
Команда len или функция len() используются для подсчёта количества элементов в объекте. Если объект является строкой,
то функция len() возвращает количество присутствующих в ней символов. Если объект представляет собой список или кортеж,
 он вернет количество элементов, присутствующих в этом списке или кортеже. При попытке передать len() целочисленное
значение, функция выдает ошибку.
len(object)
В приведенном синтаксисе: object — объект, длину которого необходимо найти (обязательно).